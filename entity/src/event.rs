//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "event")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub link: String,
    pub max_adults: i32,
    pub max_children: i32,
    pub max_adults_per_reservation: i32,
    pub max_children_per_reservation: i32,
    pub ts: DateTime,
    pub remind: i32,
    pub state: i32,
    pub adult_ticket_price: i32,
    pub child_ticket_price: i32,
    pub currency: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::attachment::Entity")]
    Attachment,
    #[sea_orm(has_many = "super::current_events::Entity")]
    CurrentEvents,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(has_many = "super::presence::Entity")]
    Presence,
    #[sea_orm(has_many = "super::reservation::Entity")]
    Reservation,
}

impl Related<super::attachment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Attachment.def()
    }
}

impl Related<super::current_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CurrentEvents.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::presence::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Presence.def()
    }
}

impl Related<super::reservation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reservation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
