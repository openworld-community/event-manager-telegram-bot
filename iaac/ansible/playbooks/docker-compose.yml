- hosts: app
  gather_facts: yes
  become: true
  tasks:
    - name: Copy config file for current version
      template:
        src: event-manager-telegram-bot.toml.j2
        dest: "/usr/local/etc/event-manager-telegram-bot.{{ docker_image_version }}.toml"
        owner: docker
        group: docker

    - name: Create dir
      file:
        path: "/opt/{{ docker_image_version }}/{{ item }}"
        state: directory
        recurse: yes
        owner: docker
        group: docker
      with_items:
        - data
        - data-pg

    - name: Debug
      debug:
        msg: "{{ api_listen_docker_port }}"

    - name: Generate docker-compose file for current version
      template:
        src: docker-compose-{{ item }}.yml.j2
        dest: "/opt/{{ docker_image_version }}/docker-compose.{{ docker_image_version }}-{{ item }}.yml"
      with_items:
        - backend
        - db

    - name: Create network for current version
      docker_network:
        name: "{{ docker_image_version }}"
        state: present

    - name: Restart docker-compose for current version backend
      docker_compose:
        project_src: "/opt/{{ docker_image_version }}"
        state: present
        recreate: always
        pull: yes
        remove_orphans: yes
        files:
          - "docker-compose.{{ docker_image_version }}-backend.yml"

    - name: Wait for docker-compose to start
      wait_for:
          host: 127.0.0.1
          port: "{{ api_listen_docker_port }}"
          delay: 5
          timeout: 60

    - name: Restart docker-compose for current version database
      docker_compose:
        project_src: "/opt/{{ docker_image_version }}"
        state: present
        recreate: smart
        pull: yes
        remove_orphans: yes
        files:
          - "docker-compose.{{ docker_image_version }}-db.yml"
      no_log: true

    - name: Wait for db to start
      wait_for:
          host: 127.0.0.1
          port: "{{ db_listen_docker_port }}"
          delay: 5
          timeout: 60

    - name: Create role
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        login_host: 127.0.0.1
        login_port: "{{ db_listen_docker_port }}"
        login_password: "{{ POSTGRES_PASSWORD }}"

    - name: Create database
      postgresql_db:
        name: "{{ db_name }}"
        login_host: 127.0.0.1
        login_port: "{{ db_listen_docker_port }}"
        login_password: "{{ POSTGRES_PASSWORD }}"
        owner: "{{ db_user }}"